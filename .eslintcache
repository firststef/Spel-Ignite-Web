[{"D:\\PersonalProjects\\spel-wg\\src\\App.tsx":"1","D:\\PersonalProjects\\spel-wg\\src\\index.tsx":"2"},{"size":10797,"mtime":1615768101976,"results":"3","hashOfConfig":"4"},{"size":261,"mtime":1615770486546,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8","usedDeprecatedRules":"9"},"10dwsuz",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\PersonalProjects\\spel-wg\\src\\App.tsx",["12","13","14","15","16","17","18","19","20","21","22"],"import React, { CSSProperties, useState } from 'react';\nimport './App.css';\n\nimport { Container, Grid, Header, Message, Segment, Image, Tab, Button, Icon, TextArea } from 'semantic-ui-react';\n\nimport AceEditor from 'react-ace';\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nimport Unity, { UnityContext } from 'react-unity-webgl';\n\nimport {get} from 'http';\n\nconst unityContext = new UnityContext({\n    loaderUrl: \"Build/html.loader.js\",\n    dataUrl: \"Build/html.data\",\n    frameworkUrl: \"Build/html.framework.js\",\n    codeUrl: \"Build/html.wasm\",\n});\n\nenum StoryChapters {\n    Beginnings,\n    TheBattle\n}\n\n//todo unde am ramas: add first challange\n\nenum ItemNodeType{\n    File,\n    Directory\n}\n\nclass INState{\n    children?: Array<INState>\n    label: string\n    type: ItemNodeType\n    depth: number\n    collapsed:boolean\n    icon: any\n    constructor(label: string, type:ItemNodeType, icon:any, children?: Array<INState>, collapsed:boolean=false, depth: number=0){\n        this.label = label;\n        this.type = type;\n        this.depth = depth;\n        this.collapsed = collapsed;\n        this.children = children;\n        this.icon = icon;\n    }\n}\n\ninterface IProps {}\n\ninterface IState {\n    compilerOut?: string;\n    currentChapter: StoryChapters,\n    lastCompiledCode: any\n}\n\nclass ItemNode extends React.Component<INState, INState>{\n    constructor(props: INState){\n        super(props);\n        this.state = props;\n    }\n\n    toggle(){\n        let $ = this;\n        if ($.state.type == ItemNodeType.Directory){\n            this.setState((state)=>({\n                ...state, \n                collapsed: !state.collapsed\n            }));\n        }\n        else if ($.state.label == 'Modify'){\n\n        }\n    } \n\n    render(){\n        let $ = this;\n        return (\n            <div>\n                {$.state.label != 'root' ? $.renderSelf(): null}\n                {$.state.collapsed? $.renderChildren():null}\n            </div>\n        );\n    }\n\n    renderSelf(){\n        let $ = this;\n        return (\n            <div style={{padding:'4px', paddingLeft:(8*$.state.depth).toString()+'px'}} >\n            <Button icon labelPosition='left' onClick={$.toggle.bind($)} color=\"green\">\n                <Icon name={$.state.collapsed? 'caret down' : ($.state.type == ItemNodeType.File ? $.state.icon : 'folder')}/>\n                {$.state.label}\n            </Button>\n            </div>\n        );\n    }\n\n    renderChildren(){\n        let $ = this;\n        return (\n            $.state.children?.map(c => \n                <ItemNode {...c} depth={$.state.label != 'root' ? $.state.depth+1: 0}/>\n            )\n        );\n    }\n}\n\ntype onCodeChangeCb = (code: string, e: Event|undefined)=> void;\n\ninterface EditorProps{\n    cb: onCodeChangeCb\n}\n\nclass Editor extends React.Component<EditorProps, EditorProps>{\n    constructor(props: EditorProps){\n        super(props);\n        this.state = props;\n    }\n\n    render(){\n        let $ = this;\n        return (\n            <Segment inverted style={{backgroundColor:\"#036780\"}}>\n                <Grid stackable verticalAlign='middle'>\n                    <Grid.Row>\n                        <Grid.Column width={3} floated='left' verticalAlign='top' style={{height:'100%', display:'flex',paddingRight:0}}>\n                            <Header as=\"h3\" style={{color:'white'}} textAlign=\"center\">Inventory</Header>\n                            <div style={{flexGrow:1,overflowX:'scroll',overflowY:'hidden'}}>\n                                <ItemNode {...$.files()}/>\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column width={13} floated='right' verticalAlign='middle'>\n                            <Tab panes={[{\n                                menuItem: 'file',\n                                pane: (\n                                    <AceEditor\n                                        mode=\"java\"\n                                        theme=\"github\"\n                                        onChange={$.onCodeChange.bind($)}\n                                        name=\"editorSpel\"\n                                        editorProps={{ $blockScrolling: true }}\n                                        width='auto'\n                                        wrapEnabled\n                                    />\n                                )\n                            }]} renderActiveOnly={false} />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n            </Segment>\n        );\n    }\n\n    files(){\n        return new INState('root', ItemNodeType.Directory,'',[\n            new INState('Modify', ItemNodeType.File, 'sun'),\n            new INState('Previous', ItemNodeType.File, 'file'),\n            new INState('Items', ItemNodeType.Directory, '', [\n                new INState('Potion', ItemNodeType.File, 'chess rock')\n            ])\n        ],true);\n    }\n\n    onCodeChange(code: string){\n        this.state.cb(code, undefined);\n    }\n}\n\nclass App extends React.Component<IProps, IState> {\n    //server_l = ''; // on server\n    server_l = 'localhost';\n\n    constructor(props:any){\n        super(props);\n        let $ = this;\n        this.state = {\n            compilerOut: 'Type the code in the input area to compile it and CAST it.',\n            lastCompiledCode: [],\n            currentChapter: StoryChapters.Beginnings,\n        }\n\n        unityContext.on(\"RequestAction\", ()=>{\n            $.action();\n        });\n    }\n\n    onCodeChange(value: string, e: Event|undefined){\n        this.requestCodeCompile(value);\n    }\n\n    beginnings(){\n        let $ = this;\n        return (\n            <div>\n                <h2>Chapter One: Beginnings</h2>\n                <Message info>\n                    <p>Your journey with <b>Spel</b> begins! Read this tutorial below to learn how to play the game.</p>\n                </Message>\n                <p>The game you are playing right now is just like any other: you can charge and cast spells, attack monsters,\n                advance in level, etc. But something is different: you do all that with writing code!</p>\n\n                <p><b>Spel</b> has a different syntax than most programming languages tho - it's definetely not made to be easy for you\n                to write in (like python :P), but to emphasize on the type of world you'll be playing in: an ancient world with\n                misteries and hidden treasures.</p>\n\n                <p>You will learn Spel as you advance <b>Story Chapters</b>, which have the purpose to teach you the basic stuff. You \n                will use a special book here in this game, you can find it in the <b>Documentation</b> tab. This documentation is \n                actually only partially complete: it shows you the knowledge matching your level. As you advance, you find out more\n                about Spel and how you can (actually) use magic.</p>\n\n                <p>Let's get right into it!</p>\n\n                <p>Here is your first Spel code: </p>\n                <Segment color='red'>\n                <code>The tale begins.<br/>\n\n                I summon thy name Player<br/>\n                craft points mana bestow 1.<br/>\n                and thy brethren.<br/>\n                </code>\n                </Segment>\n            </div>\n        );\n    }\n\n    files(){\n        return \n    }\n\n    async action(){\n        let skippedFirst = false;\n        for(let cmd of this.state.lastCompiledCode) {\n            [\"fire\", \"water\", \"earth\"].forEach(el => {\n                if (cmd.startsWith(el)){\n                    unityContext.send(\"Player\", \"TriggerAction\", el);\n                }\n            });\n            if (!skippedFirst){\n                skippedFirst = true;\n            }\n            else{\n                await new Promise(a => setTimeout(a, 500));\n            }\n        }\n    }\n\n    render() {\n        let $ = this;\n        \n        return (\n            <div className=\"App\" style={{ \n                backgroundImage: `url(\"https://external-preview.redd.it/a4VESb6Bk1hJBnH0riwFOgoKMlag6T9_QJCAJRtry4g.png?format=pjpg&auto=webp&s=08a89deb8ef4de3e65945e7d2ed6f760baabafb8\")` \n              }}>\n                <Header \n                    as='h1' \n                    style={{ fontSize: '10em' }} \n                    content=\"Spel\" \n                    subheader=\"A fantasy coding experience\"\n                    textAlign=\"center\"\n                />\n                <div style={{padding: '1em'}}>\n                    <Grid columns='equal' stackable verticalAlign='middle'>\n                        <Grid.Row>\n                                <Grid.Column verticalAlign='middle' width={6}>\n                                    <Editor cb={$.onCodeChange.bind($)}/>\n                                    <Segment inverted fluid>\n                                        <p>{$.state.compilerOut}</p>\n                                    </Segment>\n                                </Grid.Column>\n                                <Grid.Column floated='right' width={10} verticalAlign='middle'>\n                                    <Unity unityContext={unityContext} tabIndex={1} style={{width:\"100%\", height:\"100%\"}}/>                            \n                                </Grid.Column>\n                            </Grid.Row>\n                    </Grid>\n                </div>\n                <Container>\n                    <Segment style={{ padding: '8em 0em' }} vertical>\n                        <Grid container columns='equal' stackable verticalAlign='middle'>\n                            <Grid.Row>\n                                <Grid.Column>\n                                    {$.beginnings()}\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n                </Container>\n            </div>\n        );\n    }\n\n    requestCodeCompile(code: string) {\n        let $ = this;\n        // get({\n        //     hostname: $.server_l,\n        //     path: '/api/compile?code=' + Buffer.from(code).toString('base64'),\n        //     //port: 80,\n        //     method: 'GET',\n        //     headers: {\n\n        //     }\n        // }, (res)=>{\n        //     var str = '';\n        //     res.on('data', function (chunk) {\n        //       str += chunk;\n        //     });\n        //     res.on('end', function () {\n        //         str = str.replace('\\n', '<br>');\n        //       $.setState({\n        //           ...$.state,\n        //           compilerOut: str\n        //       });\n        //     });\n        // });\n        let parts = code.split('cast ');\n        this.setState({\n            ...$.state,\n            lastCompiledCode: parts\n        });\n    }\n}\n\nexport default App;\n",["23","24"],"D:\\PersonalProjects\\spel-wg\\src\\index.tsx",[],{"ruleId":"25","severity":1,"message":"26","line":1,"column":17,"nodeType":"27","messageId":"28","endLine":1,"endColumn":30},{"ruleId":"25","severity":1,"message":"29","line":1,"column":32,"nodeType":"27","messageId":"28","endLine":1,"endColumn":40},{"ruleId":"25","severity":1,"message":"30","line":4,"column":53,"nodeType":"27","messageId":"28","endLine":4,"endColumn":58},{"ruleId":"25","severity":1,"message":"31","line":4,"column":79,"nodeType":"27","messageId":"28","endLine":4,"endColumn":87},{"ruleId":"25","severity":1,"message":"32","line":12,"column":9,"nodeType":"27","messageId":"28","endLine":12,"endColumn":12},{"ruleId":"33","severity":1,"message":"34","line":66,"column":26,"nodeType":"35","messageId":"36","endLine":66,"endColumn":28},{"ruleId":"33","severity":1,"message":"34","line":72,"column":32,"nodeType":"35","messageId":"36","endLine":72,"endColumn":34},{"ruleId":"33","severity":1,"message":"37","line":81,"column":32,"nodeType":"35","messageId":"36","endLine":81,"endColumn":34},{"ruleId":"33","severity":1,"message":"34","line":92,"column":77,"nodeType":"35","messageId":"36","endLine":92,"endColumn":79},{"ruleId":"33","severity":1,"message":"37","line":103,"column":55,"nodeType":"35","messageId":"36","endLine":103,"endColumn":57},{"ruleId":"25","severity":1,"message":"38","line":193,"column":13,"nodeType":"27","messageId":"28","endLine":193,"endColumn":14},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},"@typescript-eslint/no-unused-vars","'CSSProperties' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Image' is defined but never used.","'TextArea' is defined but never used.","'get' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'$' is assigned a value but never used.","no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-global-assign","no-unsafe-negation"]